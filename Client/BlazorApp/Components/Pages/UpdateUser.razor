@page "/UpdateUser"
@using BlazorApp.Services
@using DTO
@inject IUserService HttpUserService
@attribute [Authorize]
<h3>Update User</h3>

<AuthorizeView>
    <Authorized>
        <input @bind="userId" placeholder="Enter User ID">
        <button type="button" @onclick="checkUserId">Check Id</button>
        @if (!string.IsNullOrEmpty(message))
        {
            <div style="color: green;">@message</div>
        }

        @if (IsUserFound) //Hvis bruger er fundet
        {
            <input @bind="updateruser.Username" placeholder="Username"/> //Inputboks til at skrive det nye brugernavn
            <input type="password" @bind="password" placeholder="Password"/> //Inputboks til password
            <button type="button" @onclick="updateUser">Update User</button> //Submit som kalder updateUser metoden
        }
    </Authorized>
    <NotAuthorized>
        <p>Du skal være logget ind for at kunne tilgå dette indhold.</p>
    </NotAuthorized>
</AuthorizeView>
@code
{
    private int userId; //bruges til at tjekke id
    private bool IsUserFound = false; //Som udgangspunkt sat til
    private UserDto updateruser = new UserDto();
    private string password = string.Empty; // Placeholder til nyt password
    private string message; //Til at angive status 
    public async Task checkUserId()
    {
        try
        {
          
            var user = await HttpUserService.GetUsersAsync(userId); //Finder først den pågældende bruger
            if (user != null)
            {
                IsUserFound = true; 
                updateruser = user; // Opdaterer med den modtagne UserDto
                message = string.Empty; //Sørger for at fejlmeddelsen bliver tømt fra UI hvis der var fejl

            }
            else
            {
                IsUserFound = false;
                message = $"User with ID {userId} not found.";
            }

        }
        catch (Exception e)
        {
            IsUserFound = false;
            message = $"Error: {e.Message}";
        }
        
    }

    public async Task updateUser()
    {
        try
        {
            // Opretter en ny CreateUserDto baseret på input fra brugeren
            var updatedUser = new CreateUserDto
            {
                UserName = updateruser.Username,
                Password = password // Brug det nye password
            };
            await HttpUserService.UpdateUserAsync(userId, updatedUser); //Kalder update fra servicen med det pågælde id og den opdateret bruger
            message = $"User updated successfully!"; 

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = $"Error: {e.Message}";
        }
    }
}
